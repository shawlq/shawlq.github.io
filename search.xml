<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Balance Router Algorithm in High Concurrency]]></title>
      <url>http://yoursite.com/2019/01/14/Balance-Router-Algorithm-in-High-Concurrency/</url>
      <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>最近有个需求涉及到分布式高并发获取资源的场景，简单的来说就是有个包含许多存储块的资源池，多个（并发的）任务处理的agent需要找到可用存储块并向其存储数据。</p>
<p>按以往实践的经验，可以借助<strong>zookeeper全局锁</strong>的强一致性实现，大致思路如下：</p>
<ol>
<li>zk上保存所有存储块的可用容量信息；</li>
<li>每个（独立并发的）agent获取zookeeper上所有存储块的信息，找出最优（比如可用空间最大）的存储块，然后向其存储业务数据，占用其一定的存储空间，（即把扣除后的可用空间写回到zookeeper上）；</li>
<li>因为zookeeper的强一致性，确保了多个agent同时写入也只有1个会写成功，其它会失败；</li>
<li>那么其它的agent只能重新获取zookeeper上的数据，再进入第2步去计算；</li>
</ol>
<p>上述的方案在大多数场景都是“适用”的。但是在高并发度诉求的场景下，全局锁的存在会严重影响并发度的性能。因为当1个agent写入最新值的时候，原本<strong>最优的</strong>的存储块，可能已经变成非最优，而其它agent只能废弃它们已经选择的“最优”结果，重新向zookeeper获取存储块信息并再次计算。</p>
<pre class="mermaid">sequenceDiagram
participant Agent_1
participant zookeeper
participant Agent_2
participant Agent_3

zookeeper->>+Agent_1: get chunk list (version_0)
zookeeper->>+Agent_2: get same chunk list (version_0)
zookeeper->>+Agent_3: get chunk list (version_0)
Agent_1->>-zookeeper: set chunk_i as used (version_1)
Agent_2-->>-zookeeper: set FAIL, version changed
Note over Agent_2,zookeeper: because of Agent_1 is set.
zookeeper->>+Agent_2: get new chunk list (version_1)
Agent_2->>-zookeeper: set chunk_j as used (version_2)
Agent_3-->>-zookeeper: wait for Agent_2 set successfully.</pre>

<p>上图中的version是zookeeper中保证get/set一致性的属性。然而这一过程的影响在高并发度的时候是无法忽略的：当Agent_1获取到最优，并写入zookeeper后，剩下的n-1个agent都因为一致性而重新向zookeeper获取并计算。等Agent_2写入zookeeper后，剩下的n-2又要重新获取。简单地类推这个过程，可以得到影响为（n-1）的阶乘（<strong>这个结果并不严谨，因为Agent_1可能已经完成手上的任务并重新参与这个过程</strong>）：</p>
<script type="math/tex; mode=display">
Infection = (n-1)!</script><h1 id="假设"><a href="#假设" class="headerlink" title="假设"></a>假设</h1><p>出于维持高并发度的考虑，必然需要我们放下强一致性的全局锁方案。可以设想一下，每个（高并发的）agent在路由（选择）可用存储块的时候完全不关联，而是各自独立从zookeeper上获取到存储块信息后，通过1个路由算法$\Phi$的计算，就能得到最优存储块。</p>
<p>这样，对于我们来说，关键问题就是如何找到这个算法$\phi$。</p>
<ul>
<li>性质1：显然这个$\Phi$应该是概率性质的。因为如果$\Phi$的计算是固定，比如只选择可用容量最大的存储块，那么在某一瞬间，所有正在路由的agent都会找到相同的存储块，结果就是该存储块因为大量向其存储数据而负载溢出（空间冲爆了）;</li>
<li>性质2：$\Phi$应该是当前agent的并发度$\eta$的函数，否则无法稀释概率，导致多个agent选择相同存储块，最终负载溢出;</li>
<li>性质3：$\Phi$虽然是概率性质的，但是空间越大的存储块应该有越高的概率被选择;</li>
</ul>
<p>第1点是算法$\Phi$的数学性质，第2点是防止溢出的客观约束，第3点是倾向均衡的人为预期。这3点共同保证了：即使初始状态各个存储块的可用空间不一致（例如有些快用尽，而有些新扩容出来），但是随着时间的推移（各高并发agent不断路由并消耗），所有存储块的可用空间应当趋于一致，即达到存储的负载均衡。</p>
<p><strong>综上所述，这里给出1个均衡路由的设计模型。</strong></p>
<h1 id="均衡路由模型"><a href="#均衡路由模型" class="headerlink" title="均衡路由模型"></a>均衡路由模型</h1><p>概率泛函中$\Phi(n(i), \eta, M)$，$n(i)$为第i个存储块的可用空间，$\eta$为agent的并发度，$M$是每次路由占用的空间。</p>
<p>注意：这里的$n(i)$和$M$都是无量纲的归一化值，因为空间只能整块使用，比如存储块1的可用空间有110GB，但是每次任务需要占用30GB，那么$n(1) = 3$，而$M = 1$。</p>
<p>在后续的模型中，我们假定每次需要消耗的空间$M$不变，默认$M = 1$，而$n(i)$必然是$M$的正整数倍，由此重新得到$\Phi(n(i), \eta)$。</p>
<p>同时，增加性质2的稀释约束条件：$\Phi(n(i), \eta) \times \eta \leq n(i)$，避免负载溢出。</p>
<p>出于理解方便，这里把路由计算抽象成把小球存放到柜子里的动作：所有柜子都已按可用空间由大及小排序;</p>
<h2 id="双柜模型"><a href="#双柜模型" class="headerlink" title="双柜模型"></a>双柜模型</h2><p>首先，简单地介绍下算法，这里先假设有只有2个球柜，最左边的红色小球代表的是agent的并发度$\eta$，图中的渐变色小球表示有50%的概率被选择。<br><img src="/2019/01/14/Balance-Router-Algorithm-in-High-Concurrency/2boxes.png" alt="图1：双柜模型"></p>
<p>由此，可以得到第1个柜子被选中的概率为: $\Phi(i=0,\eta,\delta)=\dfrac{1}{2} + \dfrac{\delta}{2(\eta)}$；<br>而第2个柜子被选中的概率为: $\Phi(i=1,\eta,\delta)=\dfrac{1}{2} - \dfrac{\delta}{2(\eta)}$；<br>这里，$\delta$是第1个柜子比第2个多出来的空格数，此示例中$\delta$，$\delta \in N^+$，引入$\delta$的目的就是为了满足性质3;</p>
<p>可以看出，当并发度$\eta \leq \delta$时，选择第2个柜子的概率为0(<strong>因为概率不能小于0</strong>)。第1个规格被选择的概率则是$100%$。<br>当并发度$\eta \geq \delta$时，优先填充第1个柜子多出来的2个空格，剩余小球才会随机均分到2个柜子中。<br>这也是因为算法的性质3，在第1个规格可用较多的时候会倾向于优选1，从而保障2个柜子的整体可用空间在选择后趋向均衡。</p>
<h2 id="标准模型"><a href="#标准模型" class="headerlink" title="标准模型"></a>标准模型</h2><p>相比双柜模型，实际应用的场景会略微复杂一点。可以放球的柜子不但有多个，而且柜子的可用空间还可能会相等。如图给出7个柜子，可用空间分别为（7，6，6，5，3，3，2）。需要放置15个小球，即并发度$\eta=15$：<br><img src="/2019/01/14/Balance-Router-Algorithm-in-High-Concurrency/standardmodel.png" alt="图2：标准模型"></p>
<p>标准模型仍然要满足$\Phi$的第3点性质（趋向均衡）：</p>
<ul>
<li>小球趋向于优先填充（occupied）可用空间最多的柜子，一直达到均衡线（Balance）；</li>
<li>剩余的小球（Rest requires）只能在Balance上一层可选位置（Rest Available）中随机选择；</li>
</ul>
<p>因此，可以得到</p>
<script type="math/tex; mode=display">
\Phi=\dfrac{\Delta_{i}+P}{O+NP}</script><p>其中，</p>
<ul>
<li>$\Delta_{i}$表示第i个柜子在Balance线以下的空间数量；</li>
<li>$P$表示剩余小球在水位上面选择第i个柜子的朴素概率；</li>
<li>$O$表示Balance线以下所有occupied的柜子空间；</li>
<li>$N$表示可被选择的柜子数量，不是所有的柜子都会被选择，远高于Balance的柜子是不考虑的。</li>
</ul>
<p>分析到这里，没有什么比立即给出算法的伪代码更简单明了的了。<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">FUNCTION router() -&gt; probability</div><div class="line">    var require = concurrency # 把并发度定义为需要放置小球的数量</div><div class="line">    var balance = occupied = avail = rest_avail = rest_require = box_num = 0</div><div class="line">    for box in Boxes</div><div class="line">        CALCULATE box.diff_vs_next # 比右邻box多的格子数</div><div class="line">        box_num += 1</div><div class="line">        if box.diff_vs_next == 0</div><div class="line">            # 表示相邻2个box的可用格子数相同</div><div class="line">            continue</div><div class="line"></div><div class="line">        avail += box_num * box.diff_vs_next</div><div class="line">        if avail &gt; require</div><div class="line">            break # 截断，远高于Balance线的不再考虑</div><div class="line">        </div><div class="line">        balance = box.capacity</div><div class="line"></div><div class="line">    for box in Boxes</div><div class="line">        if box.capacity &lt;= balance</div><div class="line">            break</div><div class="line">        box.diff_vs_balance = box.capacity - balance</div><div class="line">        occupied += box.diff_vs_balance</div><div class="line"></div><div class="line">    rest_require = require - occupied</div><div class="line">    rest_avail   = avail   - occupied</div><div class="line"></div><div class="line">    var r = random()</div><div class="line">    P = round(rest_require/rest_avail, 6)</div><div class="line">    for box in Boxes</div><div class="line">        Phi = round((box.diff_vs_balance + P)/(occupied + box_num * P), 6)</div><div class="line">        if r &lt;= Phi</div><div class="line">            RETURN box</div><div class="line">        r -= Phi</div><div class="line"></div><div class="line">    RETURN NONE</div></pre></td></tr></table></figure></p>
<h1 id="原型验证"><a href="#原型验证" class="headerlink" title="原型验证"></a>原型验证</h1><p>验证模型：</p>
<ul>
<li>随机初始化50个存储块，各自的初始可用空间差异较大，有的超过1000GB，而有的初始就只有300多GB；</li>
<li>设置25个agent，各自并发执行route，每次route到可用存储块便会消耗其50GB空间；</li>
<li>每个agent都会循环40次，每次之间sleep间隔100～500ms的随机值（模拟agent之间无序、无关联态）。</li>
</ul>
<p><img src="/2019/01/14/Balance-Router-Algorithm-in-High-Concurrency/boxer_router2.png" alt="图3：原型模型"></p>
<p>可以看到：</p>
<ul>
<li>那些初始容量较多的存储块优先被选择，可用容量随时间逐步减少；</li>
<li>而初始容量就少的存储块，因为不容易被选择，所以初始减幅很小；</li>
<li>随着所有存储块的平均可用空间不断下降，原本不容易被选择的存储块被选到的概率增加，继而可用空间开始减少。</li>
<li>最终在不断的消耗下，所有存储块的可用容量都会趋于均衡。</li>
</ul>
<p><strong>这就是均衡路由算法。</strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[延迟清除队列与rotate]]></title>
      <url>http://yoursite.com/2019/01/08/%E5%BB%B6%E8%BF%9F%E6%B8%85%E9%99%A4%E9%98%9F%E5%88%97%E4%B8%8Erotate/</url>
      <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>记得很早之前学习c++11 API的时候，遇到过1个接口<a href="https://zh.cppreference.com/w/cpp/algorithm/rotate">std::rotate</a>，当时不太能理解为什么要把容器整体移动一位，总觉得这种接口没有什么实际价值（事实上这个接口实现太通用，做了o(n)的移动操作，导致可用性降低）。</p>
<p>最近在工作中遇到个任务队列设计，要求从队列中取出任务对象，但是不要立即清除该对象在队列中的位置。由上层业务决定（上层会判断该任务是否需要等待，如果不等待才需要清除，否则仍旧保留在队列中。</p>
<p>综合一下诉求如下：</p>
<ol>
<li>提供获取任务的get接口，但是不立即从队列中清除；</li>
<li>每次调用get接口都能获取下一个任务；</li>
<li>上层执行任务后判断是否需要remove任务；</li>
<li>上述操作性能不能太差；</li>
</ol>
<h2 id="第一印象："><a href="#第一印象：" class="headerlink" title="第一印象："></a>第一印象：</h2><p>这里不区分deque、list等容器的差异，线性容器统一使用list讨论设计方案。</p>
<p>第一反应，能想到的就是使用list，或者unoredered_map。<br>但为了追求高性能同时不想扩大存储内存，因而选择利用list的iterator，因为iter在新增、删除非本iter时不会失效。为了简单，我们让代码中的get接口直接返回iter（这里是为了示例，不对iter做封装）。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">using</span> Lock = <span class="built_in">std</span>::lock_guard&lt;<span class="built_in">std</span>::mutex&gt;;</div><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> F&gt; <span class="keyword">class</span> IterQueue &#123;</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">list</span>&lt;F&gt; l_ ;</div><div class="line">    <span class="built_in">std</span>::mutex mtx_ ;</div><div class="line">    <span class="keyword">typename</span> <span class="built_in">std</span>::<span class="built_in">list</span>&lt;F&gt;::iterator pos;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    IterQueue():pos(<span class="number">1</span>_.end())&#123;&#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(F&amp;&amp; fu)</span> </span>&#123; <span class="function">Lock <span class="title">Lock</span><span class="params">(mtx_)</span></span>; <span class="number">1</span>_.empLace_back(<span class="built_in">std</span>::forward&lt;F&gt;(fu)); &#125;</div><div class="line"></div><div class="line">    <span class="keyword">typename</span> <span class="built_in">std</span>::<span class="built_in">list</span>&lt;F&gt;::<span class="function">iterator <span class="title">get</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="function">Lock <span class="title">Lock</span><span class="params">(mtx_)</span></span>;</div><div class="line">        <span class="comment">/*省略1_为空场景处理*/</span></div><div class="line">        <span class="keyword">if</span> (pos == <span class="number">1</span>_.end()) &#123;</div><div class="line">            pos = <span class="number">1</span>_.begin();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> pos++;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">( <span class="keyword">typename</span> <span class="built_in">std</span>::<span class="built_in">list</span>&lt;F&gt;::iterator it)</span> </span>&#123;</div><div class="line">        <span class="function">Lock <span class="title">Lock</span><span class="params">(mtx_)</span></span>;</div><div class="line">        <span class="keyword">if</span> (pos == it) pos = <span class="number">1</span>_.erase(it);</div><div class="line">        <span class="keyword">else</span> <span class="number">1</span>_.erase(it);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这种方案的优点很明显，返回iter，如果上层要删除，传回iter，erase的性能是o(1)的。<br>其缺点同样也是显而易见：</p>
<ul>
<li>iter对外暴露（虽然可以进一步封装掉，也只是暴露的程度有别）;</li>
<li>同时对多线程的并发操作有约束，不能并发erase，否则可能会导致其它线程获取的iter失效。<strong>这里之所以是可能，因为其它线程持有的iter不是erase的那个就不会失效</strong>；</li>
</ul>
<h2 id="再想一想"><a href="#再想一想" class="headerlink" title="再想一想"></a>再想一想</h2><p>上述方案使用iter其实有2个原因：</p>
<ul>
<li>变更pos_，使得每次get都能获取到下一个；</li>
<li>remove时不需要遍历，性能o(1)；</li>
</ul>
<p>针对这2个因素，同样也可以考虑利用rotate特性来实现，源码如下</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">using</span> Lock = <span class="built_in">std</span>::lock_guard&lt;<span class="built_in">std</span>::mutex&gt;;</div><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> F&gt; <span class="keyword">class</span> RotateQueue &#123;</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">list</span>&lt;F&gt; l_ ;</div><div class="line">    <span class="built_in">std</span>::mutex mtx_ ;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(F&amp;&amp; fu)</span> </span>&#123; <span class="function">Lock <span class="title">Lock</span><span class="params">(mtx_)</span></span>; <span class="number">1</span>_.emplace_front( <span class="built_in">std</span>::forward&lt;F&gt;(fu)); &#125;</div><div class="line"></div><div class="line">    <span class="function">F <span class="title">get</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="function">Lock <span class="title">Lock</span><span class="params">(mtx_ )</span></span>;</div><div class="line">        <span class="number">1</span>_.empLace_front(<span class="built_in">std</span>::move(<span class="number">1</span>_.back()));</div><div class="line">        <span class="number">1</span>_.pop_back();</div><div class="line">        <span class="keyword">return</span> l_.front();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="keyword">const</span> F&amp; fu)</span> </span>&#123;</div><div class="line">        <span class="function">Lock <span class="title">Lock</span><span class="params">(mtx_ )</span></span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> i = l_.begin(); i != l_.end(); ++i) &#123;</div><div class="line">            <span class="keyword">if</span> (fu == *i) &#123;</div><div class="line">                l_.erase(i);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样实现的优点很明显，不会暴露细节（iter）。<br>在get的时候，我们做了1次rotate，把list的back对象move到了front，并同时返回这个新front对象；<br>当上层remove这个对象的时候，因为是从begin开始的，这样就极大提升了找到的命中率。<br>当然这个性能提升也不是完美的，可以想象：</p>
<ul>
<li>当上层单线程调用get/remove时，或者多线程，但是push的频率足够慢（慢于get —&gt; remove的时间）时，remove的性能等价于o(1）;</li>
<li>但当上层多线程且push频率较高时，remove性能仍然趋向o(n)；</li>
</ul>
<h2 id="综合来看"><a href="#综合来看" class="headerlink" title="综合来看"></a>综合来看</h2><h3 id="IterQueue："><a href="#IterQueue：" class="headerlink" title="IterQueue："></a>IterQueue：</h3><ul>
<li>更适合把实现嵌到上层代码中，这样iter可以作为上层对象的私有成员访问。</li>
<li>其次上层应用可以根据实际是否会存在多线程并发iter，进一步优化代码，做好保护。</li>
</ul>
<h3 id="RotateQueue"><a href="#RotateQueue" class="headerlink" title="RotateQueue"></a>RotateQueue</h3><ul>
<li>可以独立为1个管理对象，同时在push频率显著低于 <code>get -&gt; remove</code>时具有接近于IterQueue的性能。</li>
<li>但是对上层传入的对象有约束。要求对象的value不能相同，否则存在误删除问题。</li>
</ul>
<pre class="mermaid">sequenceDiagram
Thread1->>RotateQueue: get obj(value = 0x7fxxxxxx)
Thread2->>RotateQueue: get obj(value = 0x7fxxxxxx)
Thread1->>RotateQueue: remove obj(value = 0x7fxxxxxx)
Thread1->>RotateQueue: push new obj(value = 0x7fxxxxxx)
Thread2-->>RotateQueue: remove obj(value = 0x7fxxxxxx)
Note left of Thread2 : the new pushed obj is unexpected removed!</pre>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[今天兴起，测了测养龟的水质]]></title>
      <url>http://yoursite.com/2012/08/13/20120813-%E4%BB%8A%E5%A4%A9%E5%85%B4%E8%B5%B7%E6%B5%8B%E4%BA%86%E6%B5%8B%E5%85%BB%E9%BE%9F%E7%9A%84%E6%B0%B4%E8%B4%A8/</url>
      <content type="html"><![CDATA[<p>龟龟搬家一个多月了，也换了整理箱来养龟。<br>过滤还是用的AA360，全棉。<br>（什么？要环？扯吧，全棉一样顶呱呱。）<br>先上一张先。<br><img src="/2012/08/13/20120813-今天兴起测了测养龟的水质/20120813-1.jpg" alt=""></p>
<a id="more"></a> 
<p>一看拍照了，全出来了。以为要吃东西。我喂食很规律的，每天早上8点。<br><img src="/2012/08/13/20120813-今天兴起测了测养龟的水质/20120813-2.jpg" alt=""><br><img src="/2012/08/13/20120813-今天兴起测了测养龟的水质/20120813-3.jpg" alt=""></p>
<p>养龟的水体不能笑，不然水质很难维持，之前用小缸养的时候深有体会。<br>为了避免重蹈覆辙，这次水位加深到19cm，毕竟夏天嘛，需要的。<br>啥？晒台？大热天谁谁谁晒太阳了？<br>除了房间开空调的时候，平时龟龟都待水里。<br>当然陆地还是需要的，有了陆地，龟龟不易腐皮了。<br><img src="/2012/08/13/20120813-今天兴起测了测养龟的水质/20120813-4.jpg" alt=""></p>
<p>别看陆地很小，之前做的陆地是很大的，比整理箱还大。<br>但是大也没用，龟龟从来不去，顶多就是在水边的滤棉下面打个盹。<br>今天心血来潮，测了测水质，pH忘了拍照了一刚。<br>pH有6.5，必须的都养了1个月了老水了。<br>自来水是7.2左右。<br>NH3（左边），约0.25 ppm，必然的，龟龟的便便不是每天都抽的，一般也就是2~3天抽一次。<br>这里插一句，不要指望滤桶抽便便，就算真抽了，对滤桶的负荷也是很大的。<br>NO2（中间），最关键的一项，接近0 ppm，说明滤桶中全棉的生化过滤还是刚刚的。<br>NO3（右边），My God，达到40 ppm左右，哎，看来需要加强换水了，不然也忒高了点吧。<br><img src="/2012/08/13/20120813-今天兴起测了测养龟的水质/20120813-5.jpg" alt=""></p>
<p>经历了一年多的养龟养鱼，才发现，其实养龟不需要太过追求什么过滤什么玻璃环。<br>养鱼，追求水质的同时还要求水质稳定。<br>而对于龟，放个过滤桶，放块过滤棉，然后全生化棉，就基本可以保证水质问题。<br>千万不要用瀑布过滤啊，那玩意不是养龟的，太扯了。<br>不要过于频繁换自来水，尤其是幼龟，新水易刺激腐皮。<br>当然，像我这样NO3过高的也定然不是好的榜样。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[国外龟缸的简单设计]]></title>
      <url>http://yoursite.com/2012/02/11/20120211-%E5%9B%BD%E5%A4%96%E9%BE%9F%E7%BC%B8%E7%9A%84%E7%AE%80%E5%8D%95%E8%AE%BE%E8%AE%A1/</url>
      <content type="html"><![CDATA[<p>最近看了许多龟友的龟缸设计。大受启发，所以开始google了一下，找了一些国外的龟缸设计。<br>今天就介绍一种简单的设计理念。对于已经知道的龟友，希望能够给予更多的讨论和建议。<br>下面开始：<br><img src="/2012/02/11/20120211-国外龟缸的简单设计/20120211-1.jpg" alt=""></p>
<a id="more"></a> 
<p>石头装备，无论是卵石，砖石，还是什么东西，往缸里一堆，便构成了晒台。这种设计的不如人意之处在于严重压缩了本来就不大的水体空间。<br><img src="/2012/02/11/20120211-国外龟缸的简单设计/20120211-2.jpg" alt=""><br>晒台装，晒台的优势在于，比起石头装，它释放了水体的空间。缺陷在于压缩了水面的空间，影响了龟在上水层游动时的范围。<br><img src="/2012/02/11/20120211-国外龟缸的简单设计/20120211-3.jpg" alt=""><br>水景装，其中以沉木为主打。造景本身需要空间，利用造景的实体作为晒台，就能很好的与美结合。<br>水景装是用的最多的。但是今天要介绍的是一种利用纵向空间布置的龟缸，如下:<br><img src="/2012/02/11/20120211-国外龟缸的简单设计/20120211-4.jpg" alt=""><br>我也不知道怎么称呼这种设计，它很好的利用了上下空间，把陆地和水体分离。<br>除了上陆地的那个横截面被阻挡之外，整个水体的空间得以保存。<br>此外，充分利用缸体的大小，延展了陆地部分的空间，需要的还可以设计龟巢。<br>改龟友的设计灯源用了2跟节能灯，和一个日晒等。从而保证陆地和水面的光线。<br><img src="/2012/02/11/20120211-国外龟缸的简单设计/20120211-5.jpg" alt=""><br>图片展示的是深水养龟，当然根据大家养龟的品种不同，可以自由选择水位高低。<br>延展的水体里，适当的可以养一些鱼。也许会活不长。<br><img src="/2012/02/11/20120211-国外龟缸的简单设计/20120211-6.jpg" alt=""><br>上陆部分用的一般的柔性网孔布，应该不难做到。<br>国内的龟友很多都是整理箱控。但无论你玻璃缸控还是什么控，一旦理念形成，设计也就应运而生。<br>献给每一位整理箱控，包括本人。<br><img src="/2012/02/11/20120211-国外龟缸的简单设计/20120211-7.jpg" alt=""><br>整理箱组合，分离陆地和水体空间。原理还是那个不变的原理。<br>个人觉得瀑布过滤效果不佳。相信这位龟友是为了制约成本。<br>推荐滤筒，不要因过滤而压缩了水体的空间。<br>水中放一点沉木或者植物，让龟的运动不在直来直去，这可以增加行程的距离感（相对走直线而言）。<br><img src="/2012/02/11/20120211-国外龟缸的简单设计/20120211-8.jpg" alt=""><br>组合装的侧视图。<br>如果你想更进一步，布置一个更漂亮的龟巢。见下。<br><img src="/2012/02/11/20120211-国外龟缸的简单设计/20120211-9.jpg" alt=""><br>简单组合。表面上仅仅就比我的整理箱多了一个龟窝，但冲设计上，这是一个理念的突破。<br><img src="/2012/02/11/20120211-国外龟缸的简单设计/20120211-10.jpg" alt=""><br><img src="/2012/02/11/20120211-国外龟缸的简单设计/20120211-11.jpg" alt=""><br><img src="/2012/02/11/20120211-国外龟缸的简单设计/20120211-12.jpg" alt=""><br>龟巢和龟台的区别在于内部，它的内部放了什么我也不知道。相信懂龟的朋友们一定更清楚。<br>最后，希望每一位龟友都能设计一个让龟舒适的窝，同时又不会影响自己家里的生活空间！<br><img src="/2012/02/11/20120211-国外龟缸的简单设计/20120211-13.jpg" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[办公室养龟]]></title>
      <url>http://yoursite.com/2011/12/03/20111203-%E5%8A%9E%E5%85%AC%E5%AE%A4%E5%85%BB%E9%BE%9F/</url>
      <content type="html"><![CDATA[<p>宿舍实在寒冷，小小的感冒反反复复。太心疼了，不忍心让它这么带病冬眠了。<br>只能把小小和大大带到办公室里，让它们一起陪着我白天做研究。<br>正好我的位置也是靠窗，晒太阳方便，。<br>这个小水缸、加热棒和浮台都是在淘宝上新买的。总不能吧宿舍里的大行李箱搬到办公桌上吧。<br>过滤是CY-20；加热棒是阿诺比的26度精控；浮台你懂得；水缸是阿诺比的E-340；这套装备在龟龟们现在这个年龄段，应该还能凑活过个冬天。<br>照片是 HTC的 G10 自带摄像头，为这个冬天留下一个瞬间，咔，咔，咔。</p>
<p><img src="/2011/12/03/20111203-办公室养龟/20111203-1.jpg" alt=""></p>
<a id="more"></a> 
<p><img src="/2011/12/03/20111203-办公室养龟/20111203-2.jpg" alt=""><br><img src="/2011/12/03/20111203-办公室养龟/20111203-3.jpg" alt=""><br><img src="/2011/12/03/20111203-办公室养龟/20111203-4.jpg" alt=""><br><img src="/2011/12/03/20111203-办公室养龟/20111203-5.jpg" alt=""><br><img src="/2011/12/03/20111203-办公室养龟/20111203-6.jpg" alt=""><br><img src="/2011/12/03/20111203-办公室养龟/20111203-7.jpg" alt=""></p>
]]></content>
    </entry>
    
  
  
</search>
